1)--Write a query to fetch the film names which are stared by actor's first names that ends with 'e'

A)select * from film where film_id in(
	select film_id from film_actor where actor_id in (
		select actor_id from actor where first_name like '%e'))






------------------------------------------------JOINS---------------------------------------------
select * from language

select * from film

select name from language where language_id in (select distinct(language_id) from film)

select language.name, film.title from language inner join film
on language.language_id = film.language_id



select language.name, film.title from language left outer join film
on language.language_id = film.language_id
order by 1 desc


--actorname and fim name
select film.title, concat(actor.first_name,' ',actor.last_name) actor_name 
from film join film_actor on film.film_id = film_actor.film_id
join actor on film_actor.actor_id=actor.actor_id



--number of movies started by every actor and actor name only if they have starred more than 25 films

select  concat(actor.first_name,' ',actor.last_name) actor_name ,
count(film.film_id) number_of_movie_stared
from film join film_actor on film.film_id = film_actor.film_id
join actor on film_actor.actor_id=actor.actor_id
group by concat(actor.first_name,' ',actor.last_name)
having count(film.film_id) >25
order by actor_name


--print the customer name and the total amount paid by every customer for renting movie
select * from customer
select concat(customer.first_name,' ',customer.last_name) customer_name,
sum(amount) total_amount_paid_by_Every_Customer
from customer join payment
on customer.customer_id = payment.customer_id
group by customer.customer_id
order by 2


--Print all film names and the number of times it has been rented, 
--If the film has not been rented then print the names as well
select * from rental
select * from inventory
select film.title, count(rental_id) from 
film left outer join inventory
on film.film_id = inventory.film_id
left outer join rental on rental.inventory_id = inventory.inventory_id
group by film.title
order by 2

----------------------------------------------------------------------------------------------------------------------------------------------
select * from areas

alter table areas add area varchar(20)


alter table areas add zipcode varchar(8)

insert into areas(area,zipcode) values('ABC' ,'123456')

insert into areas(area,zipcode) values('EFG' ,'123456')

insert into areas(area,zipcode) values('HHH' ,'123987')

create procedure proc_insertArea(an varchar(20),azip varchar(3))
language plpgsql
as $$
begin
   insert into areas values(an,concat(123,azip));
end;$$;

call proc_insertArea('MNO','667');
call proc_insertArea('PRS','896');
call proc_insertArea('QUV','789');
call proc_insertArea('WXY','563');
call proc_insertArea('ZIA','876');
select * from areas


select length(zipcode) from areas

select length('hello')


create or replace procedure proc_insertArea(an varchar(20),azip varchar(3))
language plpgsql
as $$
declare len integer := 0;
begin
    len := (select length(azip));
	if len =3 then
	begin
		insert into areas values(an,concat(123,azip));
		Raise Notice 'Inserted';
	end;
	else
	   Raise Notice 'invalid zipcode. Zip code cannot be more than 3 chars';
	end if;
end;$$;

call proc_insertArea('PPP','0877');


--create a procedure that will print 'hello world'

create procedure pro_name(n varchar(20))
language plpgsql
as $$
begin
  raise notice 'hello%',n;
end;$$;
call pro_name('pavan');

-- create a procedure that will take a name and greet with 'hello <the name you have given>'


create or replace function getAreas()
returns integer
language plpgsql
as 
$$
declare 
   rowcount int;
begin 
   select count(*) into rowcount from areas;
   return rowcount;
end;
$$;

select * from getAreas()




create or replace function getAreasPattern(userpat varchar(3))
returns integer
language plpgsql
as 
$$
declare 
   rowcount int;
begin 
   select count(*) into rowcount from areas where area like userpat;
   return rowcount;
end;
$$;

select * from getAreasPattern('%A%')

select * from employees;

create or replace function udfn_getEmployeeData(ephone varchar(3))
returns  table(
	ename varchar(20),
	ephoneno varchar(15)
)
language plpgsql
as 
$$
begin
   return query select name,phone from employees where phone like ephone;
end;$$

select * from udfn_getEmployeeData('1%')



--create a function that gets the film name and actor name for those 
--films which have 'the' in the title
create or replace function udfn_FilmAndActor()
returns  table(
	ActorName text,
	FilmName varchar(20)
)
language plpgsql
as 
$$
begin
   return query select  concat(actor.first_name,' ',actor.last_name),
	film.title
	from film join film_actor on film.film_id = film_actor.film_id
	join actor on film_actor.actor_id=actor.actor_id
	where film.title like '%the%' ;
end;$$

select * from udfn_FilmAndActor();

-------------------------------------------------------------------------------------------------------------------------
create or replace view vw_sample
as
  select film.title, count(rental_id) from 
film left outer join inventory
on film.film_id = inventory.film_id
left outer join rental on rental.inventory_id = inventory.inventory_id
group by film.title


--populate the view with the data from the underlying table and display
select * from vw_sample

----------------------------------------------------------------------------------------------------------------------------

1) Write a query to display the Staff full name
A)select * from staff;
select concat(first_name, ' ', last_name) Full_name from staff;

2) Write a query to get the last_update date. Check if you have functions to get the year alone

A)create or replace function udfn_GetYearOfLAstUpdate()
returns  table(
    yearoflastupdate numeric
)
language plpgsql
as 
$$
begin
   return query select  extract( year from last_update) from film;
end;$$

select * from udfn_GetYearOfLAstUpdate();



3) Write a query to display the staff_name and the address of the store

A)select concat(first_name,' ', last_name) staff_name, staff.address_id from staff join store 
on staff.store_id = store.store_id order by address_id;

4) Display the number of customer in every city with the city name

A)select city.city, count(customer_id) no_of_customers from customer join address on 
customer.address_id = address.address_id join city on address.city_id = city.city_id 
group by city.city order by no_of_customers;

 

5) A customer has lost the the film he/she rented in that case please display the film name and the cost he has to pay for that


A)select film.title movie_name, film.replace_cost 
from film join inventory on film.film_id=inventory.film_id
join rental on inventory.inventory_id=rental.inventory_id
join customer on rental_id=customer.customer_id 
order by 1

6) Take the customer name and get the total cost spent for renting(use joins) 

A)select  concat(customer.first_name, ' ', customer.last_name) customer_name, sum(payment.amount) from 
customer join rental on customer.customer_id = rental.customer_id join 
payment on payment.rental_id = rental.rental_id group by customer_name;

7) Create a stored procedure that will update the length of the file given the title and print if it was successful. The length should be updated only if the new length is greater than the old one
A)create or replace procedure proc_updateLength(filmId integer, filmLength smallint)
language plpgsql
as $$
declare len smallint := 0;
begin
    len := (select film.length from film where film.film_id = filmId);
    if len < filmLength then
    begin
        update film set length=filmLength where film.film_id = filmId;
        Raise Notice 'Inserted';
    end;
    else
       Raise Notice 'invalid length. Length cannot be more than old length';
    end if;
end;$$;


call proc_updateLength(1, cast(96 as smallint));

8) Create a function that will return all the customer names, full address(including city name and country)
A)CREATE OR REPLACE FUNCTION get_customer_addresses()
RETURNS TABLE (
    customer_name TEXT,
    full_address TEXT
) AS $$
BEGIN
    RETURN QUERY
    SELECT
        concat(customer.first_name, ' ', customer.last_name) AS customer_name,
        CONCAT_WS(', ', address.address, city.city, country.country) AS full_address
    FROM
        customer 
    JOIN
        address ON customer.address_id = address.address_id
    JOIN
        city ON address.city_id = city.city_id
    JOIN
        country ON city.country_id = country.country_id;
END;
$$ LANGUAGE plpgsql;


SELECT * FROM get_customer_addresses();



9) Create a procedure that will print the remarks on how much the customer is spending on rental
0 	:	 Not great 
0-5 	:	Beginner
>5	: 	Good one



10) Print the actor name(full name) of all the actors who have starred in movies  that have been 
rented more than 2 times

A)select concat(actor.first_name, ' ', actor.last_name) Full_name_of_Actor from actor join film_actor
on film_actor.actor_id = actor.actor_id join film on film.film_id = film_actor.film_id join inventory 
on film.film_id = inventory.film_id join rental on inventory.inventory_id = rental.inventory_id 
group by Full_name_of_Actor having count(rental.rental_id) > 2

 

11) Print the name of teh actors who has starred in movie that is rented teh most

 
A)select concat(actor.first_name, ' ', actor.last_name) actor_name, count(film.film_id) max_films from film join film_actor on 
film.film_id = film_actor.film_id join actor on film_actor.actor_id = actor.actor_id
group by actor_name order by max_films desc;
     
                                                    or
select distinct 
	concat(actor.first_name,' ',actor.last_name) as actor_name
	--, film_actor.film_id
	--, max_rent_film.rental_count
from
	actor
join
	film_actor
on actor.actor_id = film_actor.actor_id
join
(
	select rent.film_id,rent.rental_count
	from
	(
		select inventory.film_id,count(rental.rental_id) as rental_count
		from 
			inventory
		left outer join 
			rental
		on inventory.inventory_id = rental.inventory_id
		group by inventory.film_id 
	) rent
	where rent.rental_count = 
	(
		select max(max_rent.rental_count) from
		(
			select inventory.film_id,count(rental.rental_id) as rental_count
			from 
				inventory
			left outer join 
				rental
			on inventory.inventory_id = rental.inventory_id
			group by inventory.film_id
		 ) max_rent
     )	
) max_rent_film
on film_actor.film_id = max_rent_film.film_id


	 
	
 

12) print all the actor names and the total amount of rent collected by them if any
A)select concat(actor.first_name, ' ', actor.last_name) actor_name, sum(film.rental_rate) total_amount from film join film_actor on 
film.film_id = film_actor.film_id join actor on film_actor.actor_id = actor.actor_id
group by actor_name order by total_amount;

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
SELECT title, rating, length, avg(length) OVER (PARTITION BY rating) FROM film;




















