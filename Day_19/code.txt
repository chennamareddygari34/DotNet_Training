using FirstAPI.Interfaces;
using FirstAPI.Models;
using FirstAPI.Repositories;
using FirstAPI.Services;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.IdentityModel.Tokens;
using Microsoft.OpenApi.Models;
using System.Diagnostics;
using System.Text;

namespace FirstAPI
{
    public class Program
    {
        public static void Main(string[] args)
        {
            var builder = WebApplication.CreateBuilder(args);

            // Add services to the container.

            builder.Services.AddControllers();
            // Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle
            builder.Services.AddEndpointsApiExplorer();
            builder.Services.AddSwaggerGen(option =>
            {
                option.SwaggerDoc("v1", new OpenApiInfo { Title = "Demo API", Version = "v1" });
                option.AddSecurityDefinition("Bearer", new OpenApiSecurityScheme
                {
                    In = ParameterLocation.Header,
                    Description = "Please enter a valid token",
                    Name = "Authorization",
                    Type = SecuritySchemeType.Http,
                    BearerFormat = "JWT",
                    Scheme = "Bearer"
                });
                option.AddSecurityRequirement(new OpenApiSecurityRequirement
                {
                    {
                        new OpenApiSecurityScheme
                        {
                            Reference = new OpenApiReference
                            {
                                Type=ReferenceType.SecurityScheme,
                                Id="Bearer"
                            }
                        },
                        new string[]{}
                    }
                });
            });



            var stringkey = builder.Configuration.GetValue(typeof(string), "TokenKey").ToString();
            var key = Encoding.UTF8.GetBytes(stringkey);

            builder.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)
                    .AddJwtBearer(opts =>
                    {
                        opts.TokenValidationParameters = new TokenValidationParameters
                        {
                            ValidateIssuer = false,
                            ValidateAudience = false,
                            ValidateLifetime = true,
                            ValidateIssuerSigningKey = true,
                            IssuerSigningKey = new SymmetricSecurityKey(key)
                        };
                    });
            builder.Services.AddCors(opts =>
            {
                opts.AddPolicy("MyCors", options =>
                {
                    options.AllowAnyHeader().AllowAnyMethod().AllowAnyOrigin();
                });
            });

            builder.Services.AddDbContext<CompanyContext>(opts =>
            {
                opts.UseNpgsql(builder.Configuration.GetConnectionString("DefaultConnection"));
            });
            builder.Services.AddScoped<IRepository<int, Employee>, EmployeeRepository>();
            builder.Services.AddScoped<IRepository<string, User>, UserRepository>();
            builder.Services.AddScoped<IEmployeeService, EmployeeService>();
            builder.Services.AddScoped<IUserService, UserService>();
            builder.Services.AddScoped<ITokenService, TokenService>();

            var app = builder.Build();

            // Configure the HTTP request pipeline.
            if (app.Environment.IsDevelopment())
            {
                app.UseSwagger();
                app.UseSwaggerUI();
            }

            app.UseCors("MyCors");
            app.UseAuthentication();
            app.UseAuthorization();
            

            app.MapControllers();

            app.Run();
        }
    }
}
-----------------------------------------------------------------


export class Employee{
    constructor(public id:number=0,
        public name:string="",
        public salary:number =0,
        public age:number=18) 
        {

        }
    
}

-------------------------------------------------------------------


import { HttpClient, HttpHeaders } from "@angular/common/http";
import { Injectable } from "@angular/core";
import { Employee } from "../employee/employee";

@Injectable()
export class EmployeeWebService{

    constructor(private httpClient:HttpClient){

    }
    getToken():string{
        return "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiZ2ltdSIsInJvbGUiOiJNYW5hZ2VyIiwibmJmIjoxNjk1MTg3MDQxLCJleHAiOjE2OTUyNzM0NDEsImlhdCI6MTY5NTE4NzA0MX0.Kr7Bd3kX-nY64nTR3DntaaKnWyDzfnpDuMsCb0I8Mtg";
    }
    getEmployees(){
        return this.httpClient.get("http://localhost:5159/api/Employee");
    }

    addEmployee(employee:Employee){
        const header = new HttpHeaders({
            'Content-Type':'application/json',
            'Authorization':'Bearer '+this.getToken()
        });
        console.log(employee);
        const requestOptions = {headers:header};
        return this.httpClient.post("http://localhost:5159/api/Employee",employee,requestOptions);
    }
}
------------------------------------------

import { Component } from '@angular/core';
import { Employee } from './employee';
import { EmployeeService } from '../services/employee.service';
import { EmployeeWebService } from '../services/employeeweb.service';

@Component({
  selector: 'app-employee',
  templateUrl: './employee.component.html',
  styleUrls: ['./employee.component.css']
})
export class EmployeeComponent {
employee:Employee = new Employee()


constructor(private employeeService:EmployeeWebService){
  
}

addEmployee(){
  // this.employeeService.addEmployee(this.employee);
  this.employeeService.addEmployee(this.employee).subscribe(data=>{
    console.log(data)
  })
  this.employee = new Employee();
}
changeId(eid:any){
  this.employee.id=eid;
}

}
----------------------------------------------------------------------------------------
<div class="alert alert-dark">
    <!-- Employee Id: <input class="form-control" type="number" [value]="employee.id" #eid 
    (change)="changeId(eid.value)">
    <br/> -->
    Employee Name : <input class="form-control" type="text" [(ngModel)]="employee.name">
    <br/>
    Employee Salary : <input class="form-control" type="number" [(ngModel)]="employee.salary">
    <br/>
    Employee Age : <input class="form-control" type="number" [(ngModel)]="employee.age">
    <br/>
    <button  (click)="addEmployee()" class="btn btn-dark"> Add Employee<span [class]="className"></span></button>
</div>




-----------------------------------------
  import { Component } from '@angular/core';
  import { Employee } from './employee';
  import { EmployeeService } from '../services/employee.service';
  import { EmployeeWebService } from '../services/employeeweb.service';

  @Component({
    selector: 'app-employee',
    templateUrl: './employee.component.html',
    styleUrls: ['./employee.component.css']
  })
  export class EmployeeComponent {
  employee:Employee = new Employee()
  className:string="";


  constructor(private employeeService:EmployeeWebService){

  }

  addEmployee(){
    this.className= "spinner-border";
    // this.employeeService.addEmployee(this.employee);
    this.employeeService.addEmployee(this.employee).subscribe(data=>{
      this.employee = data as Employee;
      if(this.employee.id>0)
        alert("The emloyee has been added");
        this.className= "";
    },
    (err)=>{
        console.log(err);
    })
    this.employee = new Employee();
  }
  changeId(eid:any){
    this.employee.id=eid;
  }

  }

Create an API that allows used to Get and add products(id, name, price, quantity)
Repository pattern, Service are manidotory
Unit test your service

Consume the API in an angular application. 
   Show the product only if the quantity is more than 0
