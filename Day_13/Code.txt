namespace UnderstandingStateManagmentApp.Models
{
    public class User
    {
        public string Username { get; set; }
        public string Password { get; set; }
    }
}
--------------------------------------------------------
using UnderstandingStateManagmentApp.Models;

namespace UnderstandingStateManagmentApp.Services
{
    public class UserService
    {
        List<User> users = new List<User>()
        {
        new User(){Username="Ramu",Password="1234"},
        new User(){Username="Somu",Password="1122"}
        };
        public bool LoginCheck(User user)
        {
            var myUser = users.SingleOrDefault(u=>u.Username == user.Username && u.Password==user.Password);
            if(myUser == null)
                return false;
            return true;
        }
    }
}
----------------------------------------------------------
using UnderstandingStateManagmentApp.Services;

namespace UnderstandingStateManagmentApp
{
    public class Program
    {
        public static void Main(string[] args)
        {
            var builder = WebApplication.CreateBuilder(args);

            // Add services to the container.
            builder.Services.AddControllersWithViews();
            builder.Services.AddSession(opts =>
            {
                opts.IdleTimeout = TimeSpan.FromMinutes(5);
            });

            builder.Services.AddScoped<UserService>();

            var app = builder.Build();

            // Configure the HTTP request pipeline.
            if (!app.Environment.IsDevelopment())
            {
                app.UseExceptionHandler("/Home/Error");
            }
            app.UseStaticFiles();

            app.UseRouting();

            app.UseSession();

            app.UseAuthorization();

            app.MapControllerRoute(
                name: "default",
                pattern: "{controller=User}/{action=Login}/{id?}");

            app.Run();
        }
    }
}
------------------------------------------------------------------------------
using Microsoft.AspNetCore.Mvc;
using UnderstandingStateManagmentApp.Models;
using UnderstandingStateManagmentApp.Services;

namespace UnderstandingStateManagmentApp.Controllers
{
    public class UserController : Controller
    {
        private readonly UserService _userService;

        public UserController(UserService userService) 
        {
            _userService = userService;
        }
        [HttpGet]
        public IActionResult Login()
        {
            return View();
        }
        [HttpPost]
        public IActionResult Login(User user)
        {
            var result = _userService.LoginCheck(user);
            if(result)
            {
                HttpContext.Session.SetString("Username", user.Username);
                return RedirectToAction("Index", "Home");
            }
              
            ViewBag.ErrorMessage = "Invalid username or password";
            return View(user);
        }
    }
}
--------------------------------------------------------------------------------
@model UnderstandingStateManagmentApp.Models.User

@{
    ViewData["Title"] = "Login";
}

<h1>Login</h1>

<h4>User</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Login">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="Username" class="control-label"></label>
                <input asp-for="Username" class="form-control" />
                <span asp-validation-for="Username" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Password" class="control-label"></label>
                <input type="password" asp-for="Password" class="form-control" />
                <span asp-validation-for="Password" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="Login" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div class="alert alert-danger">
    @ViewBag.ErrorMessage
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
-------------------------------------------------------------------------------------------
using Microsoft.AspNetCore.Mvc;
using System.Diagnostics;
using UnderstandingStateManagmentApp.Models;

namespace UnderstandingStateManagmentApp.Controllers
{
    public class HomeController : Controller
    {
        private readonly ILogger<HomeController> _logger;

        public HomeController(ILogger<HomeController> logger)
        {
            _logger = logger;
        }

        public IActionResult Index()
        {
            try
            {
                ViewBag.User = HttpContext.Session.GetString("Username").ToString();
            }
            catch (Exception)
            {
                return RedirectToAction("Login","User");
            } 
            return View();
        }

        public IActionResult Privacy()
        {
            return View();
        }

        [ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)]
        public IActionResult Error()
        {
            return View(new ErrorViewModel { RequestId = Activity.Current?.Id ?? HttpContext.TraceIdentifier });
        }
    }
}
-----------------------------------------------------------------------------------------------
@{
    ViewData["Title"] = "Home Page";
}

<div class="text-center">
    <h1 class="display-4">Welcome @ViewBag.User</h1>
    <p>Learn about <a href="https://docs.microsoft.com/aspnet/core">building Web apps with ASP.NET Core</a>.</p>
</div>
------------------------------------------------------------------------------------------------
using Microsoft.AspNetCore.Mvc;

namespace UnderstandingStateManagmentApp.Controllers
{
    public class ProfileController : Controller
    {
        [HttpGet]
        public IActionResult UserProfile()
        {
            try
            {
                ViewBag.User = HttpContext.Session.GetString("Username").ToString();
            }
            catch (Exception)
            {
                return RedirectToAction("Login", "User");
            }
            return View();
        }
        [HttpGet]
        public IActionResult UserLogout(string un)
        {
            HttpContext.Session.Clear();
            return RedirectToAction("Login", "User");
        }
    }
}
---------------------------
@model UnderstandingStateManagmentApp.Models.User

@{
    ViewData["Title"] = "UserProfile";
}

<h1>UserProfile</h1>

<div>
    <h4>User</h4>
    <hr />
    <dl class="row">
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Username)
        </dt>
        <dd class = "col-sm-10">
            <span>@ViewBag.User</span>
        </dd>
          <a asp-action="UserLogout" asp-controller="Profile" asp-route-un="@ViewBag.User" class="btn btn-primary">Logout</a>
    </dl>
</div>

----------------------------------------------------------------------------------------------------------------------------------------------------
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - UnderstandingStateManagmentApp</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/UnderstandingStateManagmentApp.styles.css" asp-append-version="true" />
</head>
<body>
    <header>
        <nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-light bg-white border-bottom box-shadow mb-3">
            <div class="container-fluid">
                <a class="navbar-brand" asp-area="" asp-controller="Home" asp-action="Index">UnderstandingStateManagmentApp</a>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target=".navbar-collapse" aria-controls="navbarSupportedContent"
                        aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="navbar-collapse collapse d-sm-inline-flex justify-content-between">
                    <ul class="navbar-nav flex-grow-1">
                        <li class="nav-item">
                            <a class="nav-link text-dark" asp-area="" asp-controller="Home" asp-action="Index">Home</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link text-dark" asp-area="" asp-controller="Profile" asp-action="UserProfile">Profile</a>
                        </li>
                    </ul>
                </div>
            </div>
        </nav>
    </header>
    <div class="container">
        <main role="main" class="pb-3">
            @RenderBody()
        </main>
    </div>



    <footer class="border-top footer text-muted">
        <div class="container">
            &copy; 2023 - UnderstandingStateManagmentApp - <a asp-area="" asp-controller="Home" asp-action="Privacy">Privacy</a>
        </div>
    </footer>
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>
    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>
----------------------------------------------------------------------------------------------------------------------------------------------------------
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Caching.Memory;

namespace UnderstandingStateManagmentApp.Controllers
{
    public class TimeController : Controller
    {
        private readonly IMemoryCache _memoryCache;

        public TimeController(IMemoryCache memoryCache) 
        {
            _memoryCache = memoryCache;
        }
        public IActionResult Index()
        {
            if(_memoryCache.TryGetValue("time",out DateTime cacheTime)==false)
            {
                cacheTime = DateTime.Now;
                var cacheOptions = new MemoryCacheEntryOptions();
                cacheOptions.AbsoluteExpiration = DateTime.Now.AddMinutes(2);
                 _memoryCache.Set("time",cacheTime, cacheOptions);                  
            }
            ViewBag.Time = cacheTime;
            return View();
        }
    }
}
-----------------------------------------------------

@{
    ViewData["Title"] = "Index";
}

<h1>Hi the time is @ViewBag.Time</h1>


-----------------------------------------------------------
using UnderstandingStateManagmentApp.Services;

namespace UnderstandingStateManagmentApp
{
    public class Program
    {
        public static void Main(string[] args)
        {
            var builder = WebApplication.CreateBuilder(args);

            // Add services to the container.
            builder.Services.AddControllersWithViews();
            builder.Services.AddSession(opts =>
            {
                opts.IdleTimeout = TimeSpan.FromMinutes(5);
            });
            builder.Services.AddMemoryCache();



            builder.Services.AddScoped<UserService>();

            var app = builder.Build();

            // Configure the HTTP request pipeline.
            if (!app.Environment.IsDevelopment())
            {
                app.UseExceptionHandler("/Home/Error");
            }
            app.UseStaticFiles();

            app.UseRouting();

            app.UseSession();
            app.UseResponseCaching();

            app.UseAuthorization();

            app.MapControllerRoute(
                name: "default",
                pattern: "{controller=Time}/{action=Index}/{id?}");

            app.Run();
        }
    }
}
---------------------------------------------------------------------------------------------------------------------------------------------------------
Scenario: Building a Blogging Platform

You are tasked with creating a blogging platform using ASP.NET Core MVC. The platform should allow users to create, edit, and delete blog posts. Each blog post should have a title, content, publication date, and an associated author. Users should be able to view a list of blog posts, click on a post to view its details, and perform CRUD (Create, Read, Update, Delete) operations on blog posts.

1. **Model**: Design the data model for this blogging platform. Define the classes and relationships needed to represent blog posts, authors, and any other relevant entities. Also, consider how you would handle data storage.

2. **View**: Create the necessary views and templates for displaying the list of blog posts, viewing individual blog posts, and providing forms for creating and editing posts. Ensure that the user interface is intuitive and user-friendly.

3. **Controller**: Implement the controllers to handle user requests and interactions. Define actions for displaying the list of posts, creating new posts, editing existing posts, and deleting posts. Make sure to handle validation and error cases gracefully.

4. **Routing**: Configure routing in ASP.NET Core MVC to ensure that URLs are user-friendly and correspond to the expected actions. For example, `/posts` should display the list of posts, and `/posts/create` should lead to the post creation form.

5. **Testing**: Describe how you would test your blogging platform to ensure that it functions correctly. Consider unit tests for controllers and integration tests for the entire application.




Feel free to provide answers or discuss any specific aspect of this case-let question related to ASP.NET Core MVC that you'd like to explore further.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
 protected override void OnModelCreating(ModelBuilder modelBuilder)
 {
     modelBuilder.Entity<Author>().HasData(
          new Author { AuthorId = 1, Name = "Pavan", Phone = "8121288262", Email = "Pavan@123", Pic = "/images/image1.jpg " },
          new Author { AuthorId = 2, Name = "Babu", Phone = "9989355384", Email = "Babu@123", Pic = "/images/image2.jpg " }
          );

 }